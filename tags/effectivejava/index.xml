<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>effectivejava on ecycle</title>
    <link>https://2cycle.github.io/tags/effectivejava/</link>
    <description>Recent content in effectivejava on ecycle</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr-ko</language>
    <lastBuildDate>Tue, 08 Jan 2019 14:53:00 +0900</lastBuildDate>
    
	<atom:link href="https://2cycle.github.io/tags/effectivejava/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Effective JAVA 정리 chapter / item 1 </title>
      <link>https://2cycle.github.io/post/effectivejava_item_1/</link>
      <pubDate>Tue, 08 Jan 2019 14:53:00 +0900</pubDate>
      
      <guid>https://2cycle.github.io/post/effectivejava_item_1/</guid>
      <description>Effective Java 3/e Chapter 2. Item 1. 생성자 대신 정적 팩터리 메서드를 고려하라 장점  이름을 가질 수 있다.
 생성자에 넘기는 매개변수와 생성자 자체만으로는 반환된 객체의 특성을 제대로 설명하지 못한다.
 정적 팩터리는 이름만 잘 지으면 반환될 객체의 특성을 쉽게 표시할 수 있다.
   BinInteger(int , int , Random) vs BigInteger.probablePrime( int, Random)   호출될 때마다 인스턴스를 새로 생성하지 않아도 된다.
 불변 클래스는 인스턴스를 미리 만들어 놓거나 새로 생성한 인스턴스를 캐싱하여 재활용하는 식으로 불필요한 객체 생성을 피할 수 있다.</description>
    </item>
    
  </channel>
</rss>