<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on ecycle</title>
    <link>https://2cycle.github.io/tags/java/</link>
    <description>Recent content in java on ecycle</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr-ko</language>
    <lastBuildDate>Wed, 09 Jan 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://2cycle.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>EffectiveJava_Item_2</title>
      <link>https://2cycle.github.io/2019/effectivejava_item_2/</link>
      <pubDate>Wed, 09 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://2cycle.github.io/2019/effectivejava_item_2/</guid>
      <description>Effective Java 3/e Chapter 2. Item 2. 생성자 매개변수가 많다면 빌드를 고려하라  점층적 생성자 패턴 (telescoping constructor pattern)  필수 매개변수 생성자 + 선택 매개변수의 갯수에 맞는 생성자를 늘려가는 방식 매개변수가 많아지면 클라이언트 코드를 작성하거나 읽기 어렵다.   public class NutritionFacts { priavte fianl int test1; priavte fianl int test2; priavte fianl int test3; priavte fianl int test4; public NutritionFacts(int test1, int test2){ this(test1,test2,0); } public NutritionFacts(int test1, int test2, int test3){ this(test1, test2, test3, 0); } .</description>
    </item>
    
    <item>
      <title>EffectiveJava_Item_5</title>
      <link>https://2cycle.github.io/2019/effectivejava_item_5/</link>
      <pubDate>Wed, 09 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://2cycle.github.io/2019/effectivejava_item_5/</guid>
      <description>Effective Java 3/e Chapter 2. Item 5. 자원을 직접 명시하지 말고 의존 객체 주입을 사용하라  인스턴스를 생성할 때 생성자에게 필요한 자원을 넘겨주는 방식  불변을 보장하여 여러 클라이언트가 공유하여 사용 가능 의존 객체 주입은 생성자, 정적 팩터리, 빌더 모두 응용 가능  생성자에 자원 팩터리를 넘겨주는 방식  팩터리 메서드 패턴 (Factory Method pattern 구현) Java8 Supplier   Mosaic.java import java.util.function.Supplier; import java.util.stream.IntStream; @Slf4j public class Mosaic { private final Tile tile; private Mosaic(Tile tile) { this.</description>
    </item>
    
    <item>
      <title>Effective JAVA 정리 chapter / item 1 </title>
      <link>https://2cycle.github.io/2019/effectivejava_item_1/</link>
      <pubDate>Tue, 08 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://2cycle.github.io/2019/effectivejava_item_1/</guid>
      <description>Effective Java 3/e Chapter 2. Item 1. 생성자 대신 정적 팩터리 메서드를 고려하라 장점  이름을 가질 수 있다.
 생성자에 넘기는 매개변수와 생성자 자체만으로는 반환된 객체의 특성을 제대로 설명하지 못한다.
 정적 팩터리는 이름만 잘 지으면 반환될 객체의 특성을 쉽게 표시할 수 있다.
   BinInteger(int , int , Random) vs BigInteger.probablePrime( int, Random)   호출될 때마다 인스턴스를 새로 생성하지 않아도 된다.
 불변 클래스는 인스턴스를 미리 만들어 놓거나 새로 생성한 인스턴스를 캐싱하여 재활용하는 식으로 불필요한 객체 생성을 피할 수 있다.</description>
    </item>
    
  </channel>
</rss>