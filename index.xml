<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ecycle on ecycle</title>
    <link>https://2cycle.github.io/</link>
    <description>Recent content in ecycle on ecycle</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr-ko</language>
    <lastBuildDate>Wed, 09 Jan 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>EffectiveJava_Item_2</title>
      <link>https://2cycle.github.io/2019/effectivejava_item_2/</link>
      <pubDate>Wed, 09 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://2cycle.github.io/2019/effectivejava_item_2/</guid>
      <description>

&lt;h2 id=&#34;effective-java-3-e-chapter-2&#34;&gt;Effective Java 3/e Chapter 2.&lt;/h2&gt;

&lt;h3 id=&#34;item-2-생성자-매개변수가-많다면-빌드를-고려하라&#34;&gt;Item 2. 생성자 매개변수가 많다면 빌드를 고려하라&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;점층적 생성자 패턴 (telescoping constructor pattern)

&lt;ul&gt;
&lt;li&gt;필수 매개변수 생성자 + 선택 매개변수의 갯수에 맞는 생성자를 늘려가는 방식&lt;/li&gt;
&lt;li&gt;매개변수가 많아지면 클라이언트 코드를 작성하거나 읽기 어렵다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-Ex&#34;&gt;public class NutritionFacts {
    priavte fianl int test1;
    priavte fianl int test2;
    priavte fianl int test3;
    priavte fianl int test4;
    
    public NutritionFacts(int test1, int test2){
        this(test1,test2,0);
    }
    public NutritionFacts(int test1, int test2, int test3){
        this(test1, test2, test3, 0);
    }
    
    ...
    
}

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;자바빈즈 패턴 (JavaBeans pattern)

&lt;ul&gt;
&lt;li&gt;매개변수가 없는 생성자로 객체를 만든 후, 세터(setter) 메서드를 호출하여 값 설정&lt;/li&gt;
&lt;li&gt;객체가 완성되기 전까지 일관성이 무너진 상태에 놓임&lt;/li&gt;
&lt;li&gt;클래스를 불면으로 만들 수 없음&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-Ex&#34;&gt;NutritionFacts cocaCola = nw NutritionFacts();
cocaCola.setTest1(1);
cocaCola.setTest2(2);
cocaCola.setTest3(3);
cocaCola.setTest4(4);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;빌더 패턴 (Builder pattern)

&lt;ul&gt;
&lt;li&gt;필수 매개변수만으로 생성자를 호출해 빌더 객체를 얻고, 빌더 객체가 제공하는 세터 메서드로 선택 매개변수들 설정&lt;/li&gt;
&lt;li&gt;쓰기 쉽고, 읽기 쉽다.&lt;/li&gt;
&lt;li&gt;계층적으로 설계된 클래스와 함께 쓰기에 좋다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-Nu&#34;&gt;public class NutritionFacts {
    //필수
    private final int servingSize;
    private final int servings;
    //옵션
    private final int calories;
    private final int fat;
    private final int sodium;
    private final int carbohydrate;

    private NutritionFacts(Builder builder) {
        this.servingSize = builder.servingSize;
        this.servings = builder.servings;
        this.calories = builder.calories;
        this.fat = builder.fat;
        this.sodium = builder.sodium;
        this.carbohydrate = builder.carbohydrate;
    }

    public static class Builder {
        private final int servingSize;
        private final int servings;

        private int calories = 0;
        private int fat = 0;
        private int sodium = 0;
        private int carbohydrate = 0;

        public Builder(int servingSize, int servings) {
            this.servingSize = servingSize;
            this.servings = servings;
        }

        public Builder calories(int calories) {
            this.calories = calories;
            return this;
        }

        public Builder fat(int fat) {
            this.fat = fat;
            return this;
        }


        public Builder sodium(int sodium) {
            this.sodium = sodium;
            return this;
        }

        public Builder carbohydrate(int carbohydrate) {
            this.carbohydrate = carbohydrate;
            return this;
        }


        public NutritionFacts build() {
            return new NutritionFacts(this);
        }
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-Basic.java&#34;&gt;public class Item02Basic {
    public static void main(String[] args) {
        NutritionFacts cocaCola = new NutritionFacts.Builder(240,8)
                .calories(100)
                .sodium(35)
                .carbohydrate(27)
                .build();
        log.info(&amp;quot;cocaCola : {}&amp;quot;, cocaCola);

        NutritionFacts2 cocaCola2 = NutritionFacts2.builder()
                .servingSize(240)
                .servings(8)
                .calories(100)
                .sodium(35)
                .carbohydrate(27)
                .build();
        log.info(&amp;quot;cocaCola2 : {}&amp;quot;, cocaCola2);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;예제 소스 출처 : &lt;a href=&#34;https://github.com/bnpdukim/effective-java-3e/tree/master/src/main/java/study/effective/ch02/item02/basic&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/bnpdukim/effective-java-3e/tree/master/src/main/java/study/effective/ch02/item02/basic&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Effective JAVA 정리 chapter / item 1 </title>
      <link>https://2cycle.github.io/2019/effectivejava_item_1/</link>
      <pubDate>Tue, 08 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://2cycle.github.io/2019/effectivejava_item_1/</guid>
      <description>

&lt;h2 id=&#34;effective-java-3-e-chapter-2&#34;&gt;Effective Java 3/e  Chapter 2.&lt;/h2&gt;

&lt;h3 id=&#34;item-1-생성자-대신-정적-팩터리-메서드를-고려하라&#34;&gt;Item 1. 생성자 대신 정적 팩터리 메서드를 고려하라&lt;/h3&gt;

&lt;h4 id=&#34;장점&#34;&gt;장점&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;이름을 가질 수 있다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;생성자에 넘기는 매개변수와 생성자 자체만으로는 반환된 객체의 특성을 제대로 설명하지 못한다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;정적 팩터리는 이름만 잘 지으면 반환될 객체의 특성을 쉽게 표시할 수 있다.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-Ex&#34;&gt;  BinInteger(int , int , Random) vs BigInteger.probablePrime( int, Random)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;호출될 때마다 인스턴스를 새로 생성하지 않아도 된다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;불변 클래스는 인스턴스를 미리 만들어 놓거나 새로 생성한 인스턴스를 캐싱하여 재활용하는 식으로 불필요한 객체 생성을 피할 수 있다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-Ex&#34;&gt;  Boolean.valueOf(boolean)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;반환 타입의 하위 타입 객체를 반환할 수 있는 능력이 있다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;자바 8 이전에는 interface 에 companion class(인스턴스화 불가 동반 클레스)가 필요하였다. (Ex Collection)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;자바 8부터는 interface 내에 정적 메서드를 가질 수 있어 default method 활용 가능&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-Ex&#34;&gt;   EnumSet 클래스는 원소(매개변수) 갯수에 따라
   64개 이하 - RegularEnumSet 인스턴스(long변수 하나로 관리),
   65개 이상 - JumboEnumSet의 인스턴스(long배열로 관리) 를 반환한다.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;정적 팩터리 메서드를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;서비스 제공자 프레임워크(service provider framework)를 만드는 근간 (ex JDBC)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-Ex&#34;&gt;  서비스 제공자 프레임워크에서 provider는 서비스 구현체. 이 구현체들을 따라 클라이언트에서 제공하는 역할을 프레임워크가 통제하야, 클라이언트를 구현체로부터 분리
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;단점&#34;&gt;단점&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;상속을 하려면 public이나 protected 생성자가 필요하니 정적 팩터리 메서드만 제공하면 하위 클래스를 만들 수 없다.

&lt;ul&gt;
&lt;li&gt;컴포지션을 사용하도록 유도&lt;/li&gt;
&lt;li&gt;생성자의 경우 보통 private으로 만듬&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;정적 팩터리 메서드는 프로그래머가 찾기 어렵다.

&lt;ul&gt;
&lt;li&gt;자바독이 알아서 처리할 수 없으므로 API정리를 잘 해놔야하고 규약에 따라 메서드 이름을 정리&lt;/li&gt;
&lt;li&gt;from&lt;/li&gt;
&lt;li&gt;of&lt;/li&gt;
&lt;li&gt;valueOf&lt;/li&gt;
&lt;li&gt;instance&lt;/li&gt;
&lt;li&gt;create&lt;/li&gt;
&lt;li&gt;getType&lt;/li&gt;
&lt;li&gt;newType&lt;/li&gt;
&lt;li&gt;type&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;생성자를 사용시에 무분별하게 public 생성자를 사용하였는데, 이 책의 시작이었던 Item1을 읽으면서 조금 부끄러웠다.&lt;/p&gt;

&lt;p&gt;Item 90까지 읽으면 부끄럽지 않은 코딩을 할 수 있을까.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Who am I</title>
      <link>https://2cycle.github.io/about/</link>
      <pubDate>Thu, 03 Jan 2019 19:20:53 +0900</pubDate>
      
      <guid>https://2cycle.github.io/about/</guid>
      <description>&lt;p&gt;Want, Will be a programmer.&lt;/p&gt;

&lt;p&gt;Time is not on my side.&lt;/p&gt;

&lt;p&gt;go hard, go ambitious.&lt;/p&gt;

&lt;p&gt;Lights wiil guide you home.&lt;/p&gt;

&lt;p&gt;I will try to fix you.&lt;/p&gt;

&lt;p&gt;Seoul / male / ecycle.hello@gmail.com&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Init</title>
      <link>https://2cycle.github.io/2019/init/</link>
      <pubDate>Thu, 03 Jan 2019 18:22:41 +0900</pubDate>
      
      <guid>https://2cycle.github.io/2019/init/</guid>
      <description>&lt;p&gt;시작했다.
2주동안 테마고르고 지우고 고르고 지우고 반영안돼서 지우고 하다가 간단히 쓰려고 이렇게 만들었다.&lt;/p&gt;

&lt;p&gt;앞으로 주 2회 업로드를 목표로 블로그를 시작한다.&lt;/p&gt;

&lt;p&gt;첫 단추를 잘 꿰었길.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>